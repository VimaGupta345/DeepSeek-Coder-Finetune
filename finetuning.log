[2025-05-05 21:45:16,314] [INFO] [real_accelerator.py:239:get_accelerator] Setting ds_accelerator to cuda (auto detect)
[2025-05-05 21:45:19,296] [WARNING] [runner.py:215:fetch_hostfile] Unable to find hostfile, will proceed with training with local resources only.
[2025-05-05 21:45:19,296] [INFO] [runner.py:605:main] cmd = /opt/conda/envs/deepseek-coder/bin/python3.10 -u -m deepspeed.launcher.launch --world_info=eyJsb2NhbGhvc3QiOiBbMF19 --master_addr=127.0.0.1 --master_port=29500 --enable_each_rank_log=None finetune_deepseekcoder.py --model_name_or_path deepseek-ai/deepseek-coder-6.7b-instruct --data_path data/rust_instruct_format.jsonl --output_dir output/deepseek-rust-8hr-run --model_max_length 1024 --per_device_train_batch_size 16 --per_device_eval_batch_size 1 --gradient_accumulation_steps 8 --max_steps 16000 --evaluation_strategy no --save_strategy steps --save_steps 1 --save_total_limit 5 --learning_rate 2e-5 --warmup_steps 10 --logging_steps 1 --lr_scheduler_type cosine --gradient_checkpointing True --report_to tensorboard --deepspeed configs/ds_config_zero3.json --bf16 True
[2025-05-05 21:45:21,428] [INFO] [real_accelerator.py:239:get_accelerator] Setting ds_accelerator to cuda (auto detect)
[2025-05-05 21:45:24,388] [INFO] [launch.py:146:main] WORLD INFO DICT: {'localhost': [0]}
[2025-05-05 21:45:24,389] [INFO] [launch.py:152:main] nnodes=1, num_local_procs=1, node_rank=0
[2025-05-05 21:45:24,389] [INFO] [launch.py:163:main] global_rank_mapping=defaultdict(<class 'list'>, {'localhost': [0]})
[2025-05-05 21:45:24,389] [INFO] [launch.py:164:main] dist_world_size=1
[2025-05-05 21:45:24,389] [INFO] [launch.py:168:main] Setting CUDA_VISIBLE_DEVICES=0
[2025-05-05 21:45:24,390] [INFO] [launch.py:256:main] process 330635 spawned with command: ['/opt/conda/envs/deepseek-coder/bin/python3.10', '-u', 'finetune_deepseekcoder.py', '--local_rank=0', '--model_name_or_path', 'deepseek-ai/deepseek-coder-6.7b-instruct', '--data_path', 'data/rust_instruct_format.jsonl', '--output_dir', 'output/deepseek-rust-8hr-run', '--model_max_length', '1024', '--per_device_train_batch_size', '16', '--per_device_eval_batch_size', '1', '--gradient_accumulation_steps', '8', '--max_steps', '16000', '--evaluation_strategy', 'no', '--save_strategy', 'steps', '--save_steps', '1', '--save_total_limit', '5', '--learning_rate', '2e-5', '--warmup_steps', '10', '--logging_steps', '1', '--lr_scheduler_type', 'cosine', '--gradient_checkpointing', 'True', '--report_to', 'tensorboard', '--deepspeed', 'configs/ds_config_zero3.json', '--bf16', 'True']
[2025-05-05 21:45:28,203] [INFO] [real_accelerator.py:239:get_accelerator] Setting ds_accelerator to cuda (auto detect)
[2025-05-05 21:45:30,350] [INFO] [comm.py:669:init_distributed] cdb=None
[2025-05-05 21:45:30,351] [INFO] [comm.py:700:init_distributed] Initializing TorchBackend in DeepSpeed with backend nccl
====================================================================================================
TrainingArguments(
_n_gpu=1,
adafactor=False,
adam_beta1=0.9,
adam_beta2=0.999,
adam_epsilon=1e-08,
auto_find_batch_size=False,
bf16=True,
bf16_full_eval=False,
cache_dir=None,
data_seed=None,
dataloader_drop_last=False,
dataloader_num_workers=0,
dataloader_persistent_workers=False,
dataloader_pin_memory=True,
ddp_backend=None,
ddp_broadcast_buffers=None,
ddp_bucket_cap_mb=None,
ddp_find_unused_parameters=None,
ddp_timeout=1800,
debug=[],
deepspeed=configs/ds_config_zero3.json,
disable_tqdm=False,
dispatch_batches=None,
do_eval=False,
do_predict=False,
do_train=False,
eval_accumulation_steps=None,
eval_delay=0,
eval_steps=None,
evaluation_strategy=no,
fp16=False,
fp16_backend=auto,
fp16_full_eval=False,
fp16_opt_level=O1,
fsdp=[],
fsdp_config={'min_num_params': 0, 'xla': False, 'xla_fsdp_grad_ckpt': False},
fsdp_min_num_params=0,
fsdp_transformer_layer_cls_to_wrap=None,
full_determinism=False,
gradient_accumulation_steps=8,
gradient_checkpointing=True,
gradient_checkpointing_kwargs=None,
greater_is_better=None,
group_by_length=False,
half_precision_backend=auto,
hub_always_push=False,
hub_model_id=None,
hub_private_repo=False,
hub_strategy=every_save,
hub_token=<HUB_TOKEN>,
ignore_data_skip=False,
include_inputs_for_metrics=False,
include_num_input_tokens_seen=False,
include_tokens_per_second=False,
jit_mode_eval=False,
label_names=None,
label_smoothing_factor=0.0,
learning_rate=2e-05,
length_column_name=length,
load_best_model_at_end=False,
local_rank=0,
log_level=passive,
log_level_replica=warning,
log_on_each_node=True,
logging_dir=output/deepseek-rust-8hr-run/runs/May05_21-45-28_instance-20250505-025501,
logging_first_step=False,
logging_nan_inf_filter=True,
logging_steps=1.0,
logging_strategy=steps,
lr_scheduler_kwargs={},
lr_scheduler_type=cosine,
max_grad_norm=1.0,
max_steps=16000,
metric_for_best_model=None,
model_max_length=1024,
mp_parameters=,
neftune_noise_alpha=None,
no_cuda=False,
num_train_epochs=3.0,
optim=adamw_torch,
optim_args=None,
output_dir=output/deepseek-rust-8hr-run,
overwrite_output_dir=False,
past_index=-1,
per_device_eval_batch_size=1,
per_device_train_batch_size=16,
prediction_loss_only=False,
push_to_hub=False,
push_to_hub_model_id=None,
push_to_hub_organization=None,
push_to_hub_token=<PUSH_TO_HUB_TOKEN>,
ray_scope=last,
remove_unused_columns=True,
report_to=['tensorboard'],
resume_from_checkpoint=None,
run_name=output/deepseek-rust-8hr-run,
save_on_each_node=False,
save_only_model=False,
save_safetensors=True,
save_steps=1.0,
save_strategy=steps,
save_total_limit=5,
seed=42,
skip_memory_metrics=True,
split_batches=False,
tf32=None,
torch_compile=False,
torch_compile_backend=None,
torch_compile_mode=None,
torchdynamo=None,
tpu_metrics_debug=False,
tpu_num_cores=None,
use_cpu=False,
use_ipex=False,
use_legacy_prediction_loop=False,
use_mps_device=False,
warmup_ratio=0.0,
warmup_steps=10,
weight_decay=0.0,
)
PAD Token: <｜end▁of▁sentence｜> 32014
BOS Token <｜begin▁of▁sentence｜> 32013
EOS Token <|EOT|> 32021
Load tokenizer from deepseek-ai/deepseek-coder-6.7b-instruct over.
[2025-05-05 21:45:30,674] [INFO] [config.py:735:__init__] Config mesh_device None world_size = 1
[2025-05-05 21:45:41,635] [INFO] [partition_parameters.py:348:__exit__] finished initializing model - num_params = 291, num_elems = 6.74B
Load model from deepseek-ai/deepseek-coder-6.7b-instruct over.
Training dataset samples: 100000
Sample 84886 of the training set: [32013, 2042, 417, 274, 20926, 14244, 20391, 11, 26696, 254, 20676, 8041, 74, 339, 8589, 2008, 11, 6908, 457, 20676, 8041, 74, 7958, 11, 285, 340, 885, 3495, 4301, 4512, 276, 4531, 8214, 13, 1487, 4636, 2223, 13143, 4301, 11, 5411, 285, 13936, 4447, 11, 285, 746, 2159, 12, 13517, 250, 8214, 4301, 11, 340, 540, 20857, 276, 3495, 13, 185, 13518, 3649, 3475, 25, 185, 1488, 20667, 285, 30098, 254, 1884, 432, 484, 2974, 25, 185, 13518, 21289, 25, 185, 553, 18263, 207, 17, 15, 16, 17, 428, 432, 484, 8901, 8892, 407, 13, 5117, 254, 339, 5080, 56, 49, 15275, 185, 553, 1753, 429, 254, 1861, 12, 6217, 5822, 280, 437, 4960, 285, 429, 185, 553, 4077, 1615, 26782, 12, 5718, 13, 2156, 14, 3008, 20950, 49, 15275, 13, 185, 553, 185, 553, 23033, 11711, 1089, 254, 18572, 10420, 11, 12432, 207, 17, 13, 15, 1013, 19248, 22451, 12, 2831, 2585, 2774, 409, 185, 553, 4077, 1615, 4147, 13, 5047, 13, 2156, 14, 807, 7814, 14, 19248, 22451, 12, 17, 13, 15, 29, 409, 254, 29270, 11732, 185, 553, 1013, 19248, 22451, 12, 44, 2105, 409, 4077, 1615, 25510, 1079, 13, 2156, 14, 807, 7814, 14, 44, 2105, 29, 11, 429, 518, 185, 553, 3464, 13, 997, 1753, 970, 441, 330, 21860, 11, 11576, 11, 409, 10944, 185, 553, 5069, 4288, 276, 1454, 3757, 13, 185, 185, 185, 2346, 6517, 1161, 995, 1161, 90, 4456, 3265, 246, 27015, 3871, 185, 2346, 6517, 1161, 995, 1161, 21147, 53, 304, 26, 185, 2346, 6517, 1161, 995, 26, 185, 2346, 6517, 1161, 2139, 810, 1161, 246, 3994, 1161, 6087, 26, 185, 2346, 6517, 1161, 2139, 810, 1161, 246, 3994, 1161, 17531, 480, 1161, 9, 26, 185, 2346, 6517, 1161, 2139, 810, 1161, 246, 3994, 1161, 75, 12545, 1161, 9, 26, 185, 2346, 6517, 1161, 2139, 810, 1161, 246, 3994, 1161, 75, 458, 1161, 43, 458, 26, 185, 2346, 6517, 1161, 2139, 810, 1161, 246, 3994, 1161, 1580, 1161, 5716, 26, 185, 2346, 6517, 1161, 2139, 810, 1161, 246, 3994, 1161, 577, 62, 2006, 1161, 769, 3994, 6624, 26, 185, 2346, 6517, 1161, 2139, 810, 1161, 246, 3994, 1161, 90, 66, 379, 11, 680, 3994, 34, 9313, 3871, 185, 2346, 6517, 1161, 2139, 810, 1161, 246, 3994, 1161, 90, 1920, 17440, 11, 5900, 2139, 3871, 185, 2346, 6517, 1161, 2139, 810, 1161, 246, 3994, 1161, 11813, 62, 1928, 559, 62, 246, 62, 22745, 26, 185, 2346, 17615, 1161, 537, 1161, 90, 11587, 11, 8466, 11, 28745, 3004, 31076, 11, 28745, 44, 18555, 3871, 185, 2346, 17615, 1161, 537, 1161, 90, 22714, 24996, 11, 1198, 21851, 24996, 11, 16496, 1825, 3871, 185, 2346, 17615, 1161, 537, 1161, 90, 46, 806, 9252, 11, 416, 77, 8576, 3871, 185, 2346, 20914, 1161, 12597, 4581, 26, 185, 2346, 3990, 1161, 7737, 1161, 90, 8423, 250, 3871, 185, 2346, 3990, 1161, 9154, 11683, 1161, 7764, 62, 577, 62, 2006, 26, 185, 185, 11225, 2784, 4760, 65, 27, 6, 69, 29, 7, 11225, 24658, 480, 16324, 27, 6, 69, 29, 477, 207, 1069, 440, 11308, 370, 3916, 3068, 1, 334, 7737, 1096, 2139, 8, 185, 185, 16511, 27, 6, 69, 29, 4760, 65, 27, 6, 69, 29, 507, 185, 315, 4404, 19418, 748, 62, 632, 27, 6, 64, 29, 9299, 6, 64, 1781, 8, 567, 29, 573, 6, 64, 24658, 480, 16324, 27, 6, 69, 29, 507, 1624, 4760, 65, 7, 632, 353, 8, 405, 572, 1180, 26, 353, 611, 185, 92, 185, 185, 16511, 27, 6, 69, 29, 24658, 480, 327, 4760, 65, 27, 6, 69, 29, 507, 185, 315, 19418, 1627, 66, 87, 27, 6, 64, 29, 9299, 6, 64, 1781, 8, 567, 29, 573, 6, 64, 680, 3994, 34, 9313, 27, 6, 64, 29, 507, 1781, 13, 703, 62, 632, 3433, 7799, 66, 87, 611, 185, 315, 19418, 7615, 9299, 1180, 8, 567, 29, 3270, 507, 440, 2521, 65, 2770, 577, 62, 2600, 822, 611, 185, 315, 19418, 245, 62, 262, 62, 8458, 9299, 1180, 8, 567, 29, 6921, 507, 1781, 13, 703, 62, 632, 3433, 64, 62, 262, 62, 8458, 611, 185, 315, 19418, 11389, 9299, 1180, 8, 567, 29, 7481, 17440, 507, 1781, 13, 703, 62, 632, 3433, 19029, 13, 24883, 822, 611, 185, 185, 315, 19418, 1096, 27, 6, 64, 29, 9299, 6, 64, 1781, 8, 567, 29, 5900, 27, 6, 64, 29, 507, 5900, 7, 1180, 13, 703, 62, 632, 3433, 24883, 4683, 611, 185, 315, 19418, 284, 458, 27, 6, 64, 29, 9299, 6, 64, 1781, 8, 567, 29, 412, 458, 27, 6, 64, 29, 507, 412, 458, 7, 1180, 13, 703, 62, 632, 3433, 24883, 4683, 611, 185, 315, 19418, 1649, 65, 27, 6, 64, 29, 9299, 6, 64, 1781, 8, 567, 29, 4760, 65, 27, 6, 64, 29, 507, 4760, 65, 7, 1180, 13, 703, 62, 632, 3433, 24883, 4683, 611, 185, 185, 315, 19418, 273, 1267, 9299, 1180, 11, 245, 25, 573, 995, 1161, 7764, 11, 270, 25, 573, 995, 1161, 7764, 8, 567, 29, 258, 379, 27, 995, 1161, 7764, 29, 507, 185, 436, 1624, 244, 66, 87, 405, 1781, 13, 703, 62, 632, 3433, 7799, 66, 87, 13, 19061, 87, 26, 185, 185, 436, 13257, 0, 1195, 90, 1418, 76, 1267, 6468, 1077, 507, 1222, 950, 185, 4885, 1781, 13, 8372, 4085, 185, 4885, 273, 83, 62, 577, 62, 2006, 7, 19061, 87, 11, 245, 650, 185, 4885, 273, 83, 62, 577, 62, 2006, 7, 19061, 87, 11, 270, 3183, 185, 185, 436, 4168, 334, 64, 13, 9691, 1638, 11, 270, 13, 9691, 1638, 8, 507, 185, 1574, 1069, 1271, 629, 2376, 409, 1564, 317, 7420, 11, 930, 254, 9382, 33, 1526, 931, 185, 1574, 1069, 254, 13223, 1443, 473, 254, 7420, 2376, 13, 185, 1574, 334, 30738, 44, 18555, 11, 28745, 44, 18555, 8, 2044, 507, 185, 655, 16840, 62, 83, 882, 7, 1180, 11, 245, 13, 995, 11, 270, 13, 995, 628, 6087, 7, 7623, 507, 185, 1044, 13318, 7, 995, 1161, 7764, 507, 995, 25, 245, 13, 995, 11, 7420, 1638, 25, 28745, 44, 18555, 1222, 185, 655, 12037, 185, 1574, 611, 185, 185, 1574, 1069, 1271, 629, 2376, 409, 1564, 317, 5181, 18555, 11, 394], [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, 553, 18263, 207, 17, 15, 16, 17, 428, 432, 484, 8901, 8892, 407, 13, 5117, 254, 339, 5080, 56, 49, 15275, 185, 553, 1753, 429, 254, 1861, 12, 6217, 5822, 280, 437, 4960, 285, 429, 185, 553, 4077, 1615, 26782, 12, 5718, 13, 2156, 14, 3008, 20950, 49, 15275, 13, 185, 553, 185, 553, 23033, 11711, 1089, 254, 18572, 10420, 11, 12432, 207, 17, 13, 15, 1013, 19248, 22451, 12, 2831, 2585, 2774, 409, 185, 553, 4077, 1615, 4147, 13, 5047, 13, 2156, 14, 807, 7814, 14, 19248, 22451, 12, 17, 13, 15, 29, 409, 254, 29270, 11732, 185, 553, 1013, 19248, 22451, 12, 44, 2105, 409, 4077, 1615, 25510, 1079, 13, 2156, 14, 807, 7814, 14, 44, 2105, 29, 11, 429, 518, 185, 553, 3464, 13, 997, 1753, 970, 441, 330, 21860, 11, 11576, 11, 409, 10944, 185, 553, 5069, 4288, 276, 1454, 3757, 13, 185, 185, 185, 2346, 6517, 1161, 995, 1161, 90, 4456, 3265, 246, 27015, 3871, 185, 2346, 6517, 1161, 995, 1161, 21147, 53, 304, 26, 185, 2346, 6517, 1161, 995, 26, 185, 2346, 6517, 1161, 2139, 810, 1161, 246, 3994, 1161, 6087, 26, 185, 2346, 6517, 1161, 2139, 810, 1161, 246, 3994, 1161, 17531, 480, 1161, 9, 26, 185, 2346, 6517, 1161, 2139, 810, 1161, 246, 3994, 1161, 75, 12545, 1161, 9, 26, 185, 2346, 6517, 1161, 2139, 810, 1161, 246, 3994, 1161, 75, 458, 1161, 43, 458, 26, 185, 2346, 6517, 1161, 2139, 810, 1161, 246, 3994, 1161, 1580, 1161, 5716, 26, 185, 2346, 6517, 1161, 2139, 810, 1161, 246, 3994, 1161, 577, 62, 2006, 1161, 769, 3994, 6624, 26, 185, 2346, 6517, 1161, 2139, 810, 1161, 246, 3994, 1161, 90, 66, 379, 11, 680, 3994, 34, 9313, 3871, 185, 2346, 6517, 1161, 2139, 810, 1161, 246, 3994, 1161, 90, 1920, 17440, 11, 5900, 2139, 3871, 185, 2346, 6517, 1161, 2139, 810, 1161, 246, 3994, 1161, 11813, 62, 1928, 559, 62, 246, 62, 22745, 26, 185, 2346, 17615, 1161, 537, 1161, 90, 11587, 11, 8466, 11, 28745, 3004, 31076, 11, 28745, 44, 18555, 3871, 185, 2346, 17615, 1161, 537, 1161, 90, 22714, 24996, 11, 1198, 21851, 24996, 11, 16496, 1825, 3871, 185, 2346, 17615, 1161, 537, 1161, 90, 46, 806, 9252, 11, 416, 77, 8576, 3871, 185, 2346, 20914, 1161, 12597, 4581, 26, 185, 2346, 3990, 1161, 7737, 1161, 90, 8423, 250, 3871, 185, 2346, 3990, 1161, 9154, 11683, 1161, 7764, 62, 577, 62, 2006, 26, 185, 185, 11225, 2784, 4760, 65, 27, 6, 69, 29, 7, 11225, 24658, 480, 16324, 27, 6, 69, 29, 477, 207, 1069, 440, 11308, 370, 3916, 3068, 1, 334, 7737, 1096, 2139, 8, 185, 185, 16511, 27, 6, 69, 29, 4760, 65, 27, 6, 69, 29, 507, 185, 315, 4404, 19418, 748, 62, 632, 27, 6, 64, 29, 9299, 6, 64, 1781, 8, 567, 29, 573, 6, 64, 24658, 480, 16324, 27, 6, 69, 29, 507, 1624, 4760, 65, 7, 632, 353, 8, 405, 572, 1180, 26, 353, 611, 185, 92, 185, 185, 16511, 27, 6, 69, 29, 24658, 480, 327, 4760, 65, 27, 6, 69, 29, 507, 185, 315, 19418, 1627, 66, 87, 27, 6, 64, 29, 9299, 6, 64, 1781, 8, 567, 29, 573, 6, 64, 680, 3994, 34, 9313, 27, 6, 64, 29, 507, 1781, 13, 703, 62, 632, 3433, 7799, 66, 87, 611, 185, 315, 19418, 7615, 9299, 1180, 8, 567, 29, 3270, 507, 440, 2521, 65, 2770, 577, 62, 2600, 822, 611, 185, 315, 19418, 245, 62, 262, 62, 8458, 9299, 1180, 8, 567, 29, 6921, 507, 1781, 13, 703, 62, 632, 3433, 64, 62, 262, 62, 8458, 611, 185, 315, 19418, 11389, 9299, 1180, 8, 567, 29, 7481, 17440, 507, 1781, 13, 703, 62, 632, 3433, 19029, 13, 24883, 822, 611, 185, 185, 315, 19418, 1096, 27, 6, 64, 29, 9299, 6, 64, 1781, 8, 567, 29, 5900, 27, 6, 64, 29, 507, 5900, 7, 1180, 13, 703, 62, 632, 3433, 24883, 4683, 611, 185, 315, 19418, 284, 458, 27, 6, 64, 29, 9299, 6, 64, 1781, 8, 567, 29, 412, 458, 27, 6, 64, 29, 507, 412, 458, 7, 1180, 13, 703, 62, 632, 3433, 24883, 4683, 611, 185, 315, 19418, 1649, 65, 27, 6, 64, 29, 9299, 6, 64, 1781, 8, 567, 29, 4760, 65, 27, 6, 64, 29, 507, 4760, 65, 7, 1180, 13, 703, 62, 632, 3433, 24883, 4683, 611, 185, 185, 315, 19418, 273, 1267, 9299, 1180, 11, 245, 25, 573, 995, 1161, 7764, 11, 270, 25, 573, 995, 1161, 7764, 8, 567, 29, 258, 379, 27, 995, 1161, 7764, 29, 507, 185, 436, 1624, 244, 66, 87, 405, 1781, 13, 703, 62, 632, 3433, 7799, 66, 87, 13, 19061, 87, 26, 185, 185, 436, 13257, 0, 1195, 90, 1418, 76, 1267, 6468, 1077, 507, 1222, 950, 185, 4885, 1781, 13, 8372, 4085, 185, 4885, 273, 83, 62, 577, 62, 2006, 7, 19061, 87, 11, 245, 650, 185, 4885, 273, 83, 62, 577, 62, 2006, 7, 19061, 87, 11, 270, 3183, 185, 185, 436, 4168, 334, 64, 13, 9691, 1638, 11, 270, 13, 9691, 1638, 8, 507, 185, 1574, 1069, 1271, 629, 2376, 409, 1564, 317, 7420, 11, 930, 254, 9382, 33, 1526, 931, 185, 1574, 1069, 254, 13223, 1443, 473, 254, 7420, 2376, 13, 185, 1574, 334, 30738, 44, 18555, 11, 28745, 44, 18555, 8, 2044, 507, 185, 655, 16840, 62, 83, 882, 7, 1180, 11, 245, 13, 995, 11, 270, 13, 995, 628, 6087, 7, 7623, 507, 185, 1044, 13318, 7, 995, 1161, 7764, 507, 995, 25, 245, 13, 995, 11, 7420, 1638, 25, 28745, 44, 18555, 1222, 185, 655, 12037, 185, 1574, 611, 185, 185, 1574, 1069, 1271, 629, 2376, 409, 1564, 317, 5181, 18555, 11, 394].
Sample 84886 of the training set: <｜begin▁of▁sentence｜>You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.
### Instruction:
Explain and rewrite the following Rust code:
### Response:
// Copyright 2012 The Rust Project Developers. See the COPYRIGHT
// file at the top-level directory of this distribution and at
// http://rust-lang.org/COPYRIGHT.
//
// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or
// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license
// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your
// option. This file may not be copied, modified, or distributed
// except according to those terms.


use middle::ty::{BuiltinBounds};
use middle::ty::RegionVid;
use middle::ty;
use middle::typeck::infer::then;
use middle::typeck::infer::combine::*;
use middle::typeck::infer::lattice::*;
use middle::typeck::infer::lub::Lub;
use middle::typeck::infer::sub::Sub;
use middle::typeck::infer::to_str::InferStr;
use middle::typeck::infer::{cres, InferCtxt};
use middle::typeck::infer::{TypeTrace, Subtype};
use middle::typeck::infer::fold_regions_in_sig;
use syntax::ast::{Many, Once, MutImmutable, MutMutable};
use syntax::ast::{NormalFn, UnsafeFn, NodeId};
use syntax::ast::{Onceness, FnStyle};
use collections::HashMap;
use util::common::{indenter};
use util::ppaux::mt_to_str;

pub struct Glb<'f>(pub CombineFields<'f>);  // "greatest lower bound" (common subtype)

impl<'f> Glb<'f> {
    pub fn get_ref<'a>(&'a self) -> &'a CombineFields<'f> { let Glb(ref v) = *self; v }
}

impl<'f> Combine for Glb<'f> {
    fn infcx<'a>(&'a self) -> &'a InferCtxt<'a> { self.get_ref().infcx }
    fn tag(&self) -> String { "glb".to_string() }
    fn a_is_expected(&self) -> bool { self.get_ref().a_is_expected }
    fn trace(&self) -> TypeTrace { self.get_ref().trace.clone() }

    fn sub<'a>(&'a self) -> Sub<'a> { Sub(self.get_ref().clone()) }
    fn lub<'a>(&'a self) -> Lub<'a> { Lub(self.get_ref().clone()) }
    fn glb<'a>(&'a self) -> Glb<'a> { Glb(self.get_ref().clone()) }

    fn mts(&self, a: &ty::mt, b: &ty::mt) -> cres<ty::mt> {
        let tcx = self.get_ref().infcx.tcx;

        debug!("{}.mts({}, {})",
               self.tag(),
               mt_to_str(tcx, a),
               mt_to_str(tcx, b));

        match (a.mutbl, b.mutbl) {
          // If one side or both is mut, then the GLB must use
          // the precise type from the mut side.
          (MutMutable, MutMutable) => {
            eq_tys(self, a.ty, b.ty).then(|| {
                Ok(ty::mt {ty: a.ty, mutbl: MutMutable})
            })
          }

          // If one side or both is immutable, we.
Sample 39873 of the training set: [32013, 2042, 417, 274, 20926, 14244, 20391, 11, 26696, 254, 20676, 8041, 74, 339, 8589, 2008, 11, 6908, 457, 20676, 8041, 74, 7958, 11, 285, 340, 885, 3495, 4301, 4512, 276, 4531, 8214, 13, 1487, 4636, 2223, 13143, 4301, 11, 5411, 285, 13936, 4447, 11, 285, 746, 2159, 12, 13517, 250, 8214, 4301, 11, 340, 540, 20857, 276, 3495, 13, 185, 13518, 3649, 3475, 25, 185, 1488, 20667, 285, 30098, 254, 1884, 432, 484, 2974, 25, 185, 13518, 21289, 25, 185, 2346, 330, 15037, 1161, 1568, 75, 7342, 1161, 9, 26, 185, 2346, 330, 15037, 1161, 12596, 1161, 13236, 1362, 1161, 18728, 1362, 26, 185, 2346, 330, 15037, 1161, 12596, 1161, 12596, 62, 8176, 1161, 4907, 1161, 13236, 1362, 1161, 34, 2348, 1004, 32, 62, 18, 35, 26, 185, 2346, 330, 15037, 62, 1252, 1326, 18, 67, 1161, 1252, 1326, 1161, 25522, 1161, 90, 27232, 1415, 2964, 11, 14294, 3871, 185, 2346, 330, 15037, 62, 1252, 1326, 18, 67, 1161, 1252, 1326, 1161, 20348, 6022, 1161, 5995, 47, 27613, 26, 185, 185, 2346, 1834, 387, 1161, 246, 62, 14641, 1161, 2154, 22544, 1161, 32, 3546, 1413, 26, 185, 2346, 1834, 387, 1161, 246, 62, 14641, 1161, 51, 1050, 1889, 20912, 26, 185, 185, 2346, 2833, 1161, 2431, 2019, 508, 26, 185, 185, 11225, 2784, 30599, 18442, 27, 51, 29, 7, 11225, 323, 477, 185, 185, 16511, 27, 51, 25, 1834, 387, 1161, 2303, 1161, 4425, 1920, 29, 2284, 5858, 327, 30599, 18442, 27, 51, 29, 507, 185, 315, 19418, 2288, 9299, 1180, 11, 2442, 25, 573, 9691, 9152, 6934, 8, 507, 185, 436, 2442, 13, 1761, 62, 6714, 62, 1113, 7, 185, 655, 3639, 2964, 1161, 249, 62, 7819, 7, 1180, 13, 15, 13, 24883, 4683, 185, 1044, 1018, 2287, 62, 6714, 7, 1048, 66, 62, 13236, 1362, 62, 937, 13, 6714, 3433, 13115, 7, 7819, 62, 13236, 1362, 13, 6714, 4683, 650, 185, 436, 2189, 185, 436, 1018, 1761, 62, 6714, 62, 1113, 7, 5240, 2964, 1161, 249, 62, 10825, 7, 1180, 13, 15, 13, 24883, 18109, 2287, 62, 6714, 7, 4779, 393, 13, 6714, 18838, 185, 315, 611, 185, 92, 185, 185, 13538, 16088, 7, 9691, 9418, 25, 13840, 82, 8, 507, 185, 315, 9418, 185, 436, 1018, 776, 13533, 62, 24234, 7, 22545, 8743, 18728, 1362, 10647, 1161, 4878, 4683, 185, 436, 1018, 12079, 7, 51, 1050, 1889, 20912, 477, 185, 92, 185, 185, 16328, 11451, 254, 7181, 8605, 3286, 13, 1271, 274, 245, 3546, 1413, 317, 279, 254, 1141, 11, 254, 8605, 540, 330, 6746, 185, 16328, 11788, 13, 185, 13538, 21074, 62, 13236, 1362, 62, 937, 7, 185, 315, 5151, 62, 20348, 6022, 25, 2730, 27, 5995, 47, 27613, 29, 11, 185, 315, 4479, 7265, 25, 2730, 27, 27232, 1415, 2964, 29, 11, 185, 315, 5215, 25, 21539, 27, 5, 18150, 11, 2980, 27, 2431, 2019, 508, 6326, 11, 185, 315, 245, 3546, 22544, 25, 21539, 27, 4085, 2980, 27, 32, 3546, 1413, 6326, 11, 185, 8, 567, 29, 627, 865, 18, 507, 185, 315, 562, 1624, 13318, 7, 4766, 8, 405, 5215, 13, 16561, 822, 507, 185, 436, 1624, 8813, 405, 627, 865, 18, 1161, 1829, 7, 15, 1787, 207, 24, 1787, 567, 18, 15, 13, 477, 185, 436, 1624, 1716, 66, 405, 5215, 13, 7859, 335, 572, 8813, 13, 8760, 938, 1293, 185, 436, 1624, 5901, 405, 5151, 62, 20348, 6022, 13, 4596, 62, 1227, 62, 384, 62, 703, 62, 8760, 7, 185, 655, 573, 22642, 7265, 11, 185, 655, 573, 49, 333, 1161, 1829, 7, 4766, 13, 2511, 13, 10645, 4085, 1716, 66, 13, 10645, 27947, 185, 655, 8813, 13, 4082, 4085, 185, 655, 1917, 11, 185, 655, 14467, 1161, 4878, 4085, 185, 655, 4741, 9299, 91, 3575, 258, 91, 245, 3546, 22544, 13, 703, 7, 11481, 1161, 3154, 62, 11857, 7, 66, 13, 3619, 62, 2448, 372, 2631, 21, 19, 14462, 262, 62, 541, 27947, 185, 436, 4363, 185, 185, 436, 562, 1624, 4741, 7, 71, 260, 8, 405, 5901, 507, 185, 655, 5215, 13, 2511, 945, 1716, 66, 572, 5901, 13, 16, 13, 577, 72, 185, 436, 611, 1969, 507, 185, 655, 5215, 13, 2511, 945, 5215, 13, 7859, 335, 572, 8813, 185, 436, 611, 185, 315, 611, 1969, 507, 185, 436, 14467, 1161, 4878, 822, 185, 315, 611, 185, 92, 185, 185, 13538, 3967, 62, 13236, 1362, 7, 185, 315, 680, 7, 13236, 1362, 62, 937, 1772, 680, 27, 53, 865, 18, 29, 11, 185, 315, 7420, 5151, 25, 21539, 2964, 27, 7, 185, 436, 21539, 27, 5, 18150, 11, 2980, 27, 2431, 2019, 508, 6326, 11, 185, 436, 21539, 27, 9299, 9691, 5326, 688, 11, 573, 18728, 1362, 8, 29, 11, 185, 315, 2189, 29, 11, 185, 8, 507, 185, 315, 562, 1624, 13318, 9299, 2098, 2019, 508, 8, 405, 5151, 13, 80, 15, 3433, 16561, 822, 507, 185, 436, 327, 334, 9691, 5147, 11, 8605, 8, 279, 5151, 13, 80, 16, 62, 9691, 3433, 2666, 62, 9691, 822, 507, 185, 655, 562, 8605, 13, 1523, 13, 281, 62, 581, 632, 822, 2069, 28, 4741, 7, 34, 2348, 1004, 32, 62, 18, 35, 8, 507, 185, 1044, 4873, 26, 185, 655, 611, 185, 655, 5147, 13, 2511, 405, 8605, 62, 937, 26, 185, 655, 5147, 13, 5845, 62, 253, 7, 185, 1044, 630, 2019, 508, 13, 2511, 945, 630, 2019, 508, 13, 7859, 335, 572, 627, 865, 18, 1161, 1829, 7, 15, 1787, 207, 15, 1787, 207, 17, 15, 14010, 185, 1044, 630, 2019, 508, 13, 5262, 62, 89, 4085, 185, 655, 4363, 185, 436, 611, 185, 315, 611, 185, 92, 185, 32021], [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, 2346, 330, 15037, 1161, 1568, 75, 7342, 1161, 9, 26, 185, 2346, 330, 15037, 1161, 12596, 1161, 13236, 1362, 1161, 18728, 1362, 26, 185, 2346, 330, 15037, 1161, 12596, 1161, 12596, 62, 8176, 1161, 4907, 1161, 13236, 1362, 1161, 34, 2348, 1004, 32, 62, 18, 35, 26, 185, 2346, 330, 15037, 62, 1252, 1326, 18, 67, 1161, 1252, 1326, 1161, 25522, 1161, 90, 27232, 1415, 2964, 11, 14294, 3871, 185, 2346, 330, 15037, 62, 1252, 1326, 18, 67, 1161, 1252, 1326, 1161, 20348, 6022, 1161, 5995, 47, 27613, 26, 185, 185, 2346, 1834, 387, 1161, 246, 62, 14641, 1161, 2154, 22544, 1161, 32, 3546, 1413, 26, 185, 2346, 1834, 387, 1161, 246, 62, 14641, 1161, 51, 1050, 1889, 20912, 26, 185, 185, 2346, 2833, 1161, 2431, 2019, 508, 26, 185, 185, 11225, 2784, 30599, 18442, 27, 51, 29, 7, 11225, 323, 477, 185, 185, 16511, 27, 51, 25, 1834, 387, 1161, 2303, 1161, 4425, 1920, 29, 2284, 5858, 327, 30599, 18442, 27, 51, 29, 507, 185, 315, 19418, 2288, 9299, 1180, 11, 2442, 25, 573, 9691, 9152, 6934, 8, 507, 185, 436, 2442, 13, 1761, 62, 6714, 62, 1113, 7, 185, 655, 3639, 2964, 1161, 249, 62, 7819, 7, 1180, 13, 15, 13, 24883, 4683, 185, 1044, 1018, 2287, 62, 6714, 7, 1048, 66, 62, 13236, 1362, 62, 937, 13, 6714, 3433, 13115, 7, 7819, 62, 13236, 1362, 13, 6714, 4683, 650, 185, 436, 2189, 185, 436, 1018, 1761, 62, 6714, 62, 1113, 7, 5240, 2964, 1161, 249, 62, 10825, 7, 1180, 13, 15, 13, 24883, 18109, 2287, 62, 6714, 7, 4779, 393, 13, 6714, 18838, 185, 315, 611, 185, 92, 185, 185, 13538, 16088, 7, 9691, 9418, 25, 13840, 82, 8, 507, 185, 315, 9418, 185, 436, 1018, 776, 13533, 62, 24234, 7, 22545, 8743, 18728, 1362, 10647, 1161, 4878, 4683, 185, 436, 1018, 12079, 7, 51, 1050, 1889, 20912, 477, 185, 92, 185, 185, 16328, 11451, 254, 7181, 8605, 3286, 13, 1271, 274, 245, 3546, 1413, 317, 279, 254, 1141, 11, 254, 8605, 540, 330, 6746, 185, 16328, 11788, 13, 185, 13538, 21074, 62, 13236, 1362, 62, 937, 7, 185, 315, 5151, 62, 20348, 6022, 25, 2730, 27, 5995, 47, 27613, 29, 11, 185, 315, 4479, 7265, 25, 2730, 27, 27232, 1415, 2964, 29, 11, 185, 315, 5215, 25, 21539, 27, 5, 18150, 11, 2980, 27, 2431, 2019, 508, 6326, 11, 185, 315, 245, 3546, 22544, 25, 21539, 27, 4085, 2980, 27, 32, 3546, 1413, 6326, 11, 185, 8, 567, 29, 627, 865, 18, 507, 185, 315, 562, 1624, 13318, 7, 4766, 8, 405, 5215, 13, 16561, 822, 507, 185, 436, 1624, 8813, 405, 627, 865, 18, 1161, 1829, 7, 15, 1787, 207, 24, 1787, 567, 18, 15, 13, 477, 185, 436, 1624, 1716, 66, 405, 5215, 13, 7859, 335, 572, 8813, 13, 8760, 938, 1293, 185, 436, 1624, 5901, 405, 5151, 62, 20348, 6022, 13, 4596, 62, 1227, 62, 384, 62, 703, 62, 8760, 7, 185, 655, 573, 22642, 7265, 11, 185, 655, 573, 49, 333, 1161, 1829, 7, 4766, 13, 2511, 13, 10645, 4085, 1716, 66, 13, 10645, 27947, 185, 655, 8813, 13, 4082, 4085, 185, 655, 1917, 11, 185, 655, 14467, 1161, 4878, 4085, 185, 655, 4741, 9299, 91, 3575, 258, 91, 245, 3546, 22544, 13, 703, 7, 11481, 1161, 3154, 62, 11857, 7, 66, 13, 3619, 62, 2448, 372, 2631, 21, 19, 14462, 262, 62, 541, 27947, 185, 436, 4363, 185, 185, 436, 562, 1624, 4741, 7, 71, 260, 8, 405, 5901, 507, 185, 655, 5215, 13, 2511, 945, 1716, 66, 572, 5901, 13, 16, 13, 577, 72, 185, 436, 611, 1969, 507, 185, 655, 5215, 13, 2511, 945, 5215, 13, 7859, 335, 572, 8813, 185, 436, 611, 185, 315, 611, 1969, 507, 185, 436, 14467, 1161, 4878, 822, 185, 315, 611, 185, 92, 185, 185, 13538, 3967, 62, 13236, 1362, 7, 185, 315, 680, 7, 13236, 1362, 62, 937, 1772, 680, 27, 53, 865, 18, 29, 11, 185, 315, 7420, 5151, 25, 21539, 2964, 27, 7, 185, 436, 21539, 27, 5, 18150, 11, 2980, 27, 2431, 2019, 508, 6326, 11, 185, 436, 21539, 27, 9299, 9691, 5326, 688, 11, 573, 18728, 1362, 8, 29, 11, 185, 315, 2189, 29, 11, 185, 8, 507, 185, 315, 562, 1624, 13318, 9299, 2098, 2019, 508, 8, 405, 5151, 13, 80, 15, 3433, 16561, 822, 507, 185, 436, 327, 334, 9691, 5147, 11, 8605, 8, 279, 5151, 13, 80, 16, 62, 9691, 3433, 2666, 62, 9691, 822, 507, 185, 655, 562, 8605, 13, 1523, 13, 281, 62, 581, 632, 822, 2069, 28, 4741, 7, 34, 2348, 1004, 32, 62, 18, 35, 8, 507, 185, 1044, 4873, 26, 185, 655, 611, 185, 655, 5147, 13, 2511, 405, 8605, 62, 937, 26, 185, 655, 5147, 13, 5845, 62, 253, 7, 185, 1044, 630, 2019, 508, 13, 2511, 945, 630, 2019, 508, 13, 7859, 335, 572, 627, 865, 18, 1161, 1829, 7, 15, 1787, 207, 15, 1787, 207, 17, 15, 14010, 185, 1044, 630, 2019, 508, 13, 5262, 62, 89, 4085, 185, 655, 4363, 185, 436, 611, 185, 315, 611, 185, 92, 185, 32021].
Sample 39873 of the training set: <｜begin▁of▁sentence｜>You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.
### Instruction:
Explain and rewrite the following Rust code:
### Response:
use bevy::prelude::*;
use bevy::render::camera::Camera;
use bevy::render::render_graph::base::camera::CAMERA_3D;
use bevy_rapier3d::rapier::geometry::{ColliderSet, Ray};
use bevy_rapier3d::rapier::pipeline::QueryPipeline;

use crate::in_game::asteroids::Asteroid;
use crate::in_game::TiedToGame;

use super::Controllable;

pub struct CameraPlugin<T>(pub T);

impl<T: crate::util::StateType> Plugin for CameraPlugin<T> {
    fn build(&self, app: &mut AppBuilder) {
        app.add_system_set(
            SystemSet::on_update(self.0.clone())
                .with_system(calc_camera_pos.system().chain(update_camera.system())),
        )
        .add_system_set(SystemSet::on_enter(self.0.clone()).with_system(startup.system()));
    }
}

fn startup(mut commands: Commands) {
    commands
        .spawn_bundle(PerspectiveCameraBundle::default())
        .insert(TiedToGame);
}

/// Find the ideal camera position. If an asteroid is in the way, the camera will be placed
/// closer.
fn calc_camera_pos(
    query_pipeline: Res<QueryPipeline>,
    colliders: Res<ColliderSet>,
    ship: Query<&Transform, With<Controllable>>,
    asteroids: Query<(), With<Asteroid>>,
) -> Vec3 {
    if let Ok(ship) = ship.single() {
        let offset = Vec3::new(0., 9., -30.);
        let vec = ship.rotation * offset.normalize();
        let hit = query_pipeline.cast_ray_and_get_normal(
            &colliders,
            &Ray::new(ship.translation.into(), vec.into()),
            offset.length(),
            true,
            Default::default(),
            Some(&|_, c| asteroids.get(Entity::from_bits(c.user_data as u64)).is_ok()),
        );

        if let Some(hit) = hit {
            ship.translation + vec * hit.1.toi
        } else {
            ship.translation + ship.rotation * offset
        }
    } else {
        Default::default()
    }
}

fn update_camera(
    In(camera_pos): In<Vec3>,
    mut query: QuerySet<(
        Query<&Transform, With<Controllable>>,
        Query<(&mut Transform, &Camera)>,
    )>,
) {
    if let Ok(&controllable) = query.q0().single() {
        for (mut transform, camera) in query.q1_mut().iter_mut() {
            if camera.name.as_deref() != Some(CAMERA_3D) {
                continue;
            }
            transform.translation = camera_pos;
            transform.look_at(
                controllable.translation + controllable.rotation * Vec3::new(0., 0., 20.),
                controllable.local_z(),
            );
        }
    }
}
<|EOT|>.
Sample 9121 of the training set: [32013, 2042, 417, 274, 20926, 14244, 20391, 11, 26696, 254, 20676, 8041, 74, 339, 8589, 2008, 11, 6908, 457, 20676, 8041, 74, 7958, 11, 285, 340, 885, 3495, 4301, 4512, 276, 4531, 8214, 13, 1487, 4636, 2223, 13143, 4301, 11, 5411, 285, 13936, 4447, 11, 285, 746, 2159, 12, 13517, 250, 8214, 4301, 11, 340, 540, 20857, 276, 3495, 13, 185, 13518, 3649, 3475, 25, 185, 1488, 20667, 285, 30098, 254, 1884, 432, 484, 2974, 25, 185, 13518, 21289, 25, 185, 553, 18263, 207, 17, 15, 17, 15, 26527, 42, 53, 8901, 31464, 710, 13, 23033, 11711, 1089, 18572, 12, 17, 13, 15, 13, 185, 185, 2346, 2988, 1166, 1161, 26646, 256, 1161, 4996, 62, 249, 26, 185, 2346, 528, 85, 11356, 1161, 74, 85, 24197, 5820, 65, 1161, 90, 15271, 8110, 11, 13326, 277, 10533, 11, 25747, 3871, 185, 2346, 6284, 1161, 90, 17353, 1161, 76, 829, 66, 1161, 15412, 11, 7262, 11, 761, 1161, 18874, 3871, 185, 2346, 6778, 1161, 22708, 566, 1161, 23663, 1161, 14334, 62, 703, 26, 185, 2346, 6778, 1161, 22708, 566, 1161, 90, 1180, 11, 9132, 1161, 14334, 62, 4183, 271, 3871, 185, 2346, 6778, 1161, 9344, 77, 1161, 90, 1180, 11, 9418, 3871, 185, 2346, 244, 1913, 85, 1161, 18459, 1161, 9344, 77, 1161, 23663, 1161, 90, 185, 315, 1526, 62, 305, 21782, 62, 79, 390, 308, 3701, 62, 4183, 11, 1526, 62, 18501, 11, 1526, 62, 79, 390, 308, 3701, 62, 1568, 6449, 62, 915, 11, 185, 315, 1526, 62, 79, 390, 308, 3701, 62, 1568, 6449, 62, 915, 62, 977, 11, 1526, 62, 1568, 6449, 62, 915, 11, 1526, 62, 1568, 6449, 62, 915, 62, 977, 11, 185, 3871, 185, 2346, 244, 1913, 85, 1161, 18459, 1161, 90, 1180, 11, 6529, 62, 13490, 1161, 35, 13460, 15740, 5299, 11, 6518, 19626, 6934, 11, 6518, 13802, 6934, 3871, 185, 2346, 16149, 77, 62, 13104, 1161, 90, 3790, 11, 28745, 335, 11, 6931, 1201, 1290, 3871, 185, 185, 2, 58, 2806, 60, 185, 13538, 1719, 62, 9344, 77, 62, 16156, 12168, 822, 507, 185, 315, 1624, 5076, 405, 6518, 19626, 6934, 1161, 1829, 3433, 5786, 3433, 309, 9440, 1293, 185, 315, 1624, 334, 74, 11, 353, 8, 405, 334, 65, 1, 74, 950, 270, 1, 85, 2583, 185, 315, 4564, 1161, 20547, 1195, 1568, 6449, 950, 440, 2125, 7, 9083, 14386, 25575, 8, 6399, 309, 9440, 1293, 185, 315, 1526, 62, 1568, 6449, 62, 915, 62, 977, 9299, 16318, 11, 528, 11, 353, 11, 528, 11, 207, 16, 15, 477, 185, 315, 4564, 1161, 8680, 1195, 1568, 6449, 2583, 185, 315, 1526, 62, 1568, 6449, 62, 915, 9299, 16318, 11, 528, 11, 353, 11, 528, 11, 207, 16, 15, 477, 185, 315, 4564, 1161, 20547, 1195, 18501, 950, 440, 20898, 7, 16, 15, 15, 8, 6399, 309, 9440, 1293, 185, 315, 1526, 62, 18501, 9299, 16318, 11, 528, 11, 207, 16, 15, 11, 207, 17, 15, 477, 185, 315, 4564, 1161, 8680, 1195, 18501, 2583, 185, 185, 315, 1624, 353, 16, 405, 270, 1, 85, 16, 3150, 185, 315, 1624, 334, 74, 17, 11, 353, 17, 8, 405, 334, 65, 1, 74, 17, 950, 270, 1, 85, 17, 2583, 185, 315, 1526, 62, 305, 21782, 62, 79, 390, 308, 3701, 62, 4183, 9299, 16318, 11, 528, 11, 528, 11, 207, 18, 15, 11, 207, 18, 15, 477, 185, 315, 4564, 1161, 20547, 1195, 79, 390, 308, 3701, 62, 1568, 6449, 950, 440, 2125, 822, 6399, 309, 9440, 1293, 185, 315, 1526, 62, 79, 390, 308, 3701, 62, 1568, 6449, 62, 915, 62, 977, 9299, 16318, 11, 528, 11, 353, 16, 11, 528, 11, 207, 18, 15, 11, 207, 18, 15, 11, 1917, 477, 185, 315, 1526, 62, 1568, 6449, 62, 915, 9299, 16318, 11, 528, 17, 11, 353, 17, 11, 528, 17, 11, 207, 18, 16, 477, 185, 315, 4564, 1161, 8680, 1195, 79, 390, 308, 3701, 62, 1568, 6449, 2583, 185, 315, 1526, 62, 79, 390, 308, 3701, 62, 1568, 6449, 62, 915, 9299, 16318, 11, 528, 11, 353, 16, 11, 528, 11, 207, 18, 15, 11, 207, 18, 15, 11, 1917, 477, 185, 315, 1526, 62, 18501, 9299, 16318, 11, 528, 11, 207, 18, 15, 11, 207, 19, 15, 477, 185, 315, 1526, 62, 18501, 9299, 16318, 11, 528, 17, 11, 207, 18, 16, 11, 207, 19, 16, 477, 185, 315, 1526, 62, 703, 9299, 16318, 11, 528, 11, 207, 20, 15, 11, 353, 16, 477, 185, 315, 1526, 62, 703, 9299, 16318, 11, 528, 17, 11, 207, 20, 15, 11, 353, 17, 477, 185, 92, 185, 185, 2, 58, 2806, 60, 185, 13538, 1719, 62, 22423, 62, 703, 1253, 62, 3966, 62, 1267, 62, 384, 62, 292, 4804, 62, 19532, 62, 4183, 822, 507, 185, 315, 1624, 5076, 405, 6518, 19626, 6934, 1161, 1829, 3433, 5786, 3433, 309, 9440, 1293, 185, 315, 1624, 6778, 405, 6518, 13802, 6934, 1161, 27, 3575, 413, 13460, 15740, 5299, 29, 1161, 3154, 62, 16318, 62, 384, 62, 4183, 62, 76, 877, 7, 185, 436, 5076, 11, 185, 436, 413, 13460, 15740, 5299, 28917, 185, 436, 338, 1797, 8110, 1161, 53, 16, 11, 185, 315, 2189, 185, 315, 1018, 5786, 822, 185, 315, 1018, 309, 9440, 1293, 185, 185, 315, 1624, 334, 1568, 6449, 62, 9344, 11, 836, 6449, 62, 22696, 8, 405, 7210, 1293, 185, 315, 1069, 5463, 245, 1470, 1433, 3426, 3034, 27851, 285, 4730, 254, 6529, 279, 4876, 185, 315, 4564, 1161, 20547, 1195, 7613, 12, 1113, 12, 4183, 12, 246, 12, 19532, 950, 440, 20920, 7, 20, 15, 15, 8, 6399, 309, 9440, 1293, 185, 315, 6778, 185, 436, 1018, 30754, 62, 9344, 77, 62, 7397, 7, 185, 655, 9418, 1161, 47, 3338, 3797, 1161, 1829, 7, 185, 1044, 1716, 66, 18560, 30738, 335, 1161, 7695, 62, 915, 7, 3790, 1161, 3154, 62, 2024, 7, 65, 1, 74, 8472, 270, 1, 85, 2770, 577, 62, 5004, 4683, 2705, 185, 1044, 270, 1, 74, 2770, 577, 62, 5004, 4085, 185, 474, 19, 15, 13, 10645, 4085, 185, 474, 17, 15, 15, 15, 15, 11, 185, 1044, 2515, 11, 185, 474, 16, 11, 185, 1044, 6931, 1201, 1290, 1161, 4878, 4085, 185, 1044, 6931, 1201, 1290, 1161], [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, 553, 18263, 207, 17, 15, 17, 15, 26527, 42, 53, 8901, 31464, 710, 13, 23033, 11711, 1089, 18572, 12, 17, 13, 15, 13, 185, 185, 2346, 2988, 1166, 1161, 26646, 256, 1161, 4996, 62, 249, 26, 185, 2346, 528, 85, 11356, 1161, 74, 85, 24197, 5820, 65, 1161, 90, 15271, 8110, 11, 13326, 277, 10533, 11, 25747, 3871, 185, 2346, 6284, 1161, 90, 17353, 1161, 76, 829, 66, 1161, 15412, 11, 7262, 11, 761, 1161, 18874, 3871, 185, 2346, 6778, 1161, 22708, 566, 1161, 23663, 1161, 14334, 62, 703, 26, 185, 2346, 6778, 1161, 22708, 566, 1161, 90, 1180, 11, 9132, 1161, 14334, 62, 4183, 271, 3871, 185, 2346, 6778, 1161, 9344, 77, 1161, 90, 1180, 11, 9418, 3871, 185, 2346, 244, 1913, 85, 1161, 18459, 1161, 9344, 77, 1161, 23663, 1161, 90, 185, 315, 1526, 62, 305, 21782, 62, 79, 390, 308, 3701, 62, 4183, 11, 1526, 62, 18501, 11, 1526, 62, 79, 390, 308, 3701, 62, 1568, 6449, 62, 915, 11, 185, 315, 1526, 62, 79, 390, 308, 3701, 62, 1568, 6449, 62, 915, 62, 977, 11, 1526, 62, 1568, 6449, 62, 915, 11, 1526, 62, 1568, 6449, 62, 915, 62, 977, 11, 185, 3871, 185, 2346, 244, 1913, 85, 1161, 18459, 1161, 90, 1180, 11, 6529, 62, 13490, 1161, 35, 13460, 15740, 5299, 11, 6518, 19626, 6934, 11, 6518, 13802, 6934, 3871, 185, 2346, 16149, 77, 62, 13104, 1161, 90, 3790, 11, 28745, 335, 11, 6931, 1201, 1290, 3871, 185, 185, 2, 58, 2806, 60, 185, 13538, 1719, 62, 9344, 77, 62, 16156, 12168, 822, 507, 185, 315, 1624, 5076, 405, 6518, 19626, 6934, 1161, 1829, 3433, 5786, 3433, 309, 9440, 1293, 185, 315, 1624, 334, 74, 11, 353, 8, 405, 334, 65, 1, 74, 950, 270, 1, 85, 2583, 185, 315, 4564, 1161, 20547, 1195, 1568, 6449, 950, 440, 2125, 7, 9083, 14386, 25575, 8, 6399, 309, 9440, 1293, 185, 315, 1526, 62, 1568, 6449, 62, 915, 62, 977, 9299, 16318, 11, 528, 11, 353, 11, 528, 11, 207, 16, 15, 477, 185, 315, 4564, 1161, 8680, 1195, 1568, 6449, 2583, 185, 315, 1526, 62, 1568, 6449, 62, 915, 9299, 16318, 11, 528, 11, 353, 11, 528, 11, 207, 16, 15, 477, 185, 315, 4564, 1161, 20547, 1195, 18501, 950, 440, 20898, 7, 16, 15, 15, 8, 6399, 309, 9440, 1293, 185, 315, 1526, 62, 18501, 9299, 16318, 11, 528, 11, 207, 16, 15, 11, 207, 17, 15, 477, 185, 315, 4564, 1161, 8680, 1195, 18501, 2583, 185, 185, 315, 1624, 353, 16, 405, 270, 1, 85, 16, 3150, 185, 315, 1624, 334, 74, 17, 11, 353, 17, 8, 405, 334, 65, 1, 74, 17, 950, 270, 1, 85, 17, 2583, 185, 315, 1526, 62, 305, 21782, 62, 79, 390, 308, 3701, 62, 4183, 9299, 16318, 11, 528, 11, 528, 11, 207, 18, 15, 11, 207, 18, 15, 477, 185, 315, 4564, 1161, 20547, 1195, 79, 390, 308, 3701, 62, 1568, 6449, 950, 440, 2125, 822, 6399, 309, 9440, 1293, 185, 315, 1526, 62, 79, 390, 308, 3701, 62, 1568, 6449, 62, 915, 62, 977, 9299, 16318, 11, 528, 11, 353, 16, 11, 528, 11, 207, 18, 15, 11, 207, 18, 15, 11, 1917, 477, 185, 315, 1526, 62, 1568, 6449, 62, 915, 9299, 16318, 11, 528, 17, 11, 353, 17, 11, 528, 17, 11, 207, 18, 16, 477, 185, 315, 4564, 1161, 8680, 1195, 79, 390, 308, 3701, 62, 1568, 6449, 2583, 185, 315, 1526, 62, 79, 390, 308, 3701, 62, 1568, 6449, 62, 915, 9299, 16318, 11, 528, 11, 353, 16, 11, 528, 11, 207, 18, 15, 11, 207, 18, 15, 11, 1917, 477, 185, 315, 1526, 62, 18501, 9299, 16318, 11, 528, 11, 207, 18, 15, 11, 207, 19, 15, 477, 185, 315, 1526, 62, 18501, 9299, 16318, 11, 528, 17, 11, 207, 18, 16, 11, 207, 19, 16, 477, 185, 315, 1526, 62, 703, 9299, 16318, 11, 528, 11, 207, 20, 15, 11, 353, 16, 477, 185, 315, 1526, 62, 703, 9299, 16318, 11, 528, 17, 11, 207, 20, 15, 11, 353, 17, 477, 185, 92, 185, 185, 2, 58, 2806, 60, 185, 13538, 1719, 62, 22423, 62, 703, 1253, 62, 3966, 62, 1267, 62, 384, 62, 292, 4804, 62, 19532, 62, 4183, 822, 507, 185, 315, 1624, 5076, 405, 6518, 19626, 6934, 1161, 1829, 3433, 5786, 3433, 309, 9440, 1293, 185, 315, 1624, 6778, 405, 6518, 13802, 6934, 1161, 27, 3575, 413, 13460, 15740, 5299, 29, 1161, 3154, 62, 16318, 62, 384, 62, 4183, 62, 76, 877, 7, 185, 436, 5076, 11, 185, 436, 413, 13460, 15740, 5299, 28917, 185, 436, 338, 1797, 8110, 1161, 53, 16, 11, 185, 315, 2189, 185, 315, 1018, 5786, 822, 185, 315, 1018, 309, 9440, 1293, 185, 185, 315, 1624, 334, 1568, 6449, 62, 9344, 11, 836, 6449, 62, 22696, 8, 405, 7210, 1293, 185, 315, 1069, 5463, 245, 1470, 1433, 3426, 3034, 27851, 285, 4730, 254, 6529, 279, 4876, 185, 315, 4564, 1161, 20547, 1195, 7613, 12, 1113, 12, 4183, 12, 246, 12, 19532, 950, 440, 20920, 7, 20, 15, 15, 8, 6399, 309, 9440, 1293, 185, 315, 6778, 185, 436, 1018, 30754, 62, 9344, 77, 62, 7397, 7, 185, 655, 9418, 1161, 47, 3338, 3797, 1161, 1829, 7, 185, 1044, 1716, 66, 18560, 30738, 335, 1161, 7695, 62, 915, 7, 3790, 1161, 3154, 62, 2024, 7, 65, 1, 74, 8472, 270, 1, 85, 2770, 577, 62, 5004, 4683, 2705, 185, 1044, 270, 1, 74, 2770, 577, 62, 5004, 4085, 185, 474, 19, 15, 13, 10645, 4085, 185, 474, 17, 15, 15, 15, 15, 11, 185, 1044, 2515, 11, 185, 474, 16, 11, 185, 1044, 6931, 1201, 1290, 1161, 4878, 4085, 185, 1044, 6931, 1201, 1290, 1161].
Sample 9121 of the training set: <｜begin▁of▁sentence｜>You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.
### Instruction:
Explain and rewrite the following Rust code:
### Response:
// Copyright 2020 TiKV Project Authors. Licensed under Apache-2.0.

use futures::executor::block_on;
use kvproto::kvrpcpb::{ApiVersion, AssertionLevel, Context};
use std::{sync::mpsc::channel, thread, time::Duration};
use storage::mvcc::tests::must_get;
use storage::mvcc::{self, tests::must_locked};
use storage::txn::{self, commands};
use tikv::storage::txn::tests::{
    must_acquire_pessimistic_lock, must_commit, must_pessimistic_prewrite_put,
    must_pessimistic_prewrite_put_err, must_prewrite_put, must_prewrite_put_err,
};
use tikv::storage::{self, lock_manager::DummyLockManager, TestEngineBuilder, TestStorageBuilder};
use txn_types::{Key, Mutation, TimeStamp};

#[test]
fn test_txn_failpoints() {
    let engine = TestEngineBuilder::new().build().unwrap();
    let (k, v) = (b"k", b"v");
    fail::cfg("prewrite", "return(WriteConflict)").unwrap();
    must_prewrite_put_err(&engine, k, v, k, 10);
    fail::remove("prewrite");
    must_prewrite_put(&engine, k, v, k, 10);
    fail::cfg("commit", "delay(100)").unwrap();
    must_commit(&engine, k, 10, 20);
    fail::remove("commit");

    let v1 = b"v1";
    let (k2, v2) = (b"k2", b"v2");
    must_acquire_pessimistic_lock(&engine, k, k, 30, 30);
    fail::cfg("pessimistic_prewrite", "return()").unwrap();
    must_pessimistic_prewrite_put_err(&engine, k, v1, k, 30, 30, true);
    must_prewrite_put(&engine, k2, v2, k2, 31);
    fail::remove("pessimistic_prewrite");
    must_pessimistic_prewrite_put(&engine, k, v1, k, 30, 30, true);
    must_commit(&engine, k, 30, 40);
    must_commit(&engine, k2, 31, 41);
    must_get(&engine, k, 50, v1);
    must_get(&engine, k2, 50, v2);
}

#[test]
fn test_atomic_getting_max_ts_and_storing_memory_lock() {
    let engine = TestEngineBuilder::new().build().unwrap();
    let storage = TestStorageBuilder::<_, DummyLockManager>::from_engine_and_lock_mgr(
        engine,
        DummyLockManager {},
        ApiVersion::V1,
    )
    .build()
    .unwrap();

    let (prewrite_tx, prewrite_rx) = channel();
    // sleep a while between getting max ts and store the lock in memory
    fail::cfg("before-set-lock-in-memory", "sleep(500)").unwrap();
    storage
        .sched_txn_command(
            commands::Prewrite::new(
                vec![Mutation::make_put(Key::from_raw(b"k"), b"v".to_vec())],
                b"k".to_vec(),
                40.into(),
                20000,
                false,
                1,
                TimeStamp::default(),
                TimeStamp::.
ninja: no work to do.
Time to load cpu_adam op: 2.311746835708618 seconds
Parameter Offload: Total persistent parameters: 266240 in 65 params
[2025-05-05 21:46:43,410] [WARNING] [lr_schedules.py:683:get_lr] Attempting to get learning rate from scheduler before it has started
{'loss': 1.067, 'learning_rate': 0.0, 'epoch': 0.0}
